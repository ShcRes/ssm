<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
        
   <context:property-placeholder location="classpath:db.properties"/>
   <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
   		<property name="driverClassName" value="${jdbc.driver}"/>

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.init}"/>
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="${jdbc.testSql}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

        <!-- 配置监控统计拦截的filters 
        <property name="filters" value="stat"/>
        <property name="proxyFilters">
            <list>
                <ref bean="druidLogFilter"/>
            </list>
        </property>-->
   </bean>
   
   <!--自定义的数据源日志过滤器
    <bean id="druidLogFilter" class="com.alibaba.druid.druidLogFilter.Slf4jLogFilter"></bean>-->
    
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
    </bean>
    
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource"/>
    </bean>
    
    <aop:config>
        <!-- 定义切点，service及其子包下的所有以Service结尾的类的所有方法-->
        <aop:pointcut id="txPointCut" expression="execution(* *..service..*.*(..))"/>
        <!-- 关联切点和增强，构成切面-->
        <aop:advisor order="1" pointcut-ref="txPointCut" advice-ref="txAdvice"/>
    </aop:config>

    <tx:advice id='txAdvice' transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" rollback-for="java.lang.Exception" propagation="REQUIRED"/>
            <!--<tx:method name="*Insert*" rollback-for="Exception"/>-->
            <!--<tx:method name="*Modify*" rollback-for="Exception"/>-->
            <!--<tx:method name="*Delete*" rollback-for="Exception"/>-->
            <!--<tx:method name="*Remove*" rollback-for="Exception"/>-->
            <!--<tx:method name="*init*" rollback-for="Exception"/>-->
            <!--<tx:method name="*Init*" rollback-for="Exception"/>-->
        </tx:attributes>
    </tx:advice>
    
    
    <context:component-scan base-package="com.shc">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>
    
    
    <!-- <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>financemanage..*</value>
            </list>
        </property>
    </bean>
    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
    </aop:config> -->
</beans>